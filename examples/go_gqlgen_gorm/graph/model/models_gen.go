// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type CreateUserInput struct {
	ClientMutationID *string          `json:"clientMutationId,omitempty"`
	Email            string           `json:"email"`
	Name             string           `json:"name"`
	Password         string           `json:"password"`
	BirthDate        *ISO8601DateTime `json:"birthDate,omitempty"`
}

type CreateUserResponse struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	User             *User   `json:"user"`
}

type DeleteUserInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	ID               string  `json:"id"`
}

type DeleteUserResponse struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	User             *User   `json:"user"`
}

type LogInInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	Email            string  `json:"email"`
	Password         string  `json:"password"`
}

type LogInResponse struct {
	ClientMutationID *string         `json:"clientMutationId,omitempty"`
	Token            string          `json:"token"`
	User             *User           `json:"user"`
	Now              ISO8601DateTime `json:"now"`
}

type LogOutInput struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

type LogOutResponse struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
}

type Mutation struct {
}

type Query struct {
}

type UpdateUserInput struct {
	ClientMutationID *string          `json:"clientMutationId,omitempty"`
	ID               string           `json:"id"`
	Email            *string          `json:"email,omitempty"`
	Name             *string          `json:"name,omitempty"`
	Password         *string          `json:"password,omitempty"`
	BirthDate        *ISO8601DateTime `json:"birthDate,omitempty"`
}

type UpdateUserResponse struct {
	ClientMutationID *string `json:"clientMutationId,omitempty"`
	User             *User   `json:"user"`
}

type Emotion string

const (
	EmotionLike    Emotion = "LIKE"
	EmotionDislike Emotion = "DISLIKE"
	EmotionLove    Emotion = "LOVE"
	EmotionLaugh   Emotion = "LAUGH"
	EmotionCry     Emotion = "CRY"
	EmotionWow     Emotion = "WOW"
)

var AllEmotion = []Emotion{
	EmotionLike,
	EmotionDislike,
	EmotionLove,
	EmotionLaugh,
	EmotionCry,
	EmotionWow,
}

func (e Emotion) IsValid() bool {
	switch e {
	case EmotionLike, EmotionDislike, EmotionLove, EmotionLaugh, EmotionCry, EmotionWow:
		return true
	}
	return false
}

func (e Emotion) String() string {
	return string(e)
}

func (e *Emotion) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Emotion(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Emotion", str)
	}
	return nil
}

func (e Emotion) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Emotion) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Emotion) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
