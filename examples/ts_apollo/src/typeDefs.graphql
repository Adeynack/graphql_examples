#
# Scalars
#
scalar ISO8601DateTime # TODO: Tell CodeGen that it maps to/from `string` (right now, codegen is `ISO8601DateTime: { input: any; output: any; }`)
#
# Models
#
type User {
  id: ID!
  email: String!
  name: String!
  posts: [Post!]!
  reactions: [Reaction!]!
}

type Post {
  id: ID!
  authorId: ID!
  author: User!
  parent: Post
  text: String!
  reactions: [Reaction!]!
  createdAt: ISO8601DateTime!
}

enum Emotion {
  LIKE
  DISLIKE
  LOVE
  LAUGH
  CRY
  WOW
}

type Reaction {
  id: ID!
  emotion: Emotion!
  createdAt: ISO8601DateTime!
  post: Post!
  user: User!
}

#
# Query
#
type Query {
  me: User
  post(id: ID!): Post!
  posts: [Post!]!
  user(id: ID, email: String): User!
  users: [User!]!
}

#
# Mutations, their inputs and responses
#
type Mutation {
  logIn(input: LogInInput!): LogInResult!
  logOut(input: LogOutInput!): LogOutResponse!
  createUser(input: CreateUserInput!): CreateUserResponse!
  updateUser(input: UpdateUserInput!): UpdateUserResponse!
  deleteUser(input: DeleteUserInput!): DeleteUserResponse!
}

input LogInInput {
  clientMutationId: ID
  email: String!
  password: String!
}

type LogInResult {
  clientMutationId: ID
  token: String!
  user: User!
}

input LogOutInput {
  clientMutationId: ID
}

type LogOutResponse {
  clientMutationId: ID
}

input CreateUserInput {
  clientMutationId: ID
  email: String!
  name: String!
  password: String!
}

type CreateUserResponse {
  clientMutationId: ID
  user: User!
}

input UpdateUserInput {
  clientMutationId: ID
  id: ID!
  email: String
  name: String
  password: String
}

type UpdateUserResponse {
  clientMutationId: ID
  user: User!
}

input DeleteUserInput {
  clientMutationId: ID
  id: ID!
}

type DeleteUserResponse {
  clientMutationId: ID
  user: User!
}
